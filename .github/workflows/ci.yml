name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  validate:
    name: Validate Configurations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install PyYAML
        run: pip install PyYAML

      - name: Validate configurations
        run: make validate

      - name: Check Python syntax
        run: make test

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=scripts --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Create .env file
        run: cp .env.example .env

      - name: Build Docker images
        run: docker compose build --parallel

      - name: Start services
        run: |
          make up
          sleep 45

      - name: Check service health
        run: |
          make health || (docker compose logs && exit 1)

      - name: Run integration tests
        run: |
          pip install pytest requests
          pytest tests/integration/ -v

      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs > logs.txt
          docker compose ps

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs
          path: logs.txt

      - name: Cleanup
        if: always()
        run: docker compose down -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan Docker images
        run: |
          docker compose -f docker-compose.yml config --images | \
          grep -v "^$" | \
          xargs -I {} sh -c 'docker pull {} && trivy image {} --severity HIGH,CRITICAL'

  build:
    name: Build and Tag Images
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Read VERSION
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build and tag images
        run: |
          export VERSION=${{ steps.version.outputs.VERSION }}
          docker compose build
          
          # Tag custom images
          docker tag test-hard-openscap-scanner:latest test-hard/openscap-scanner:$VERSION
          docker tag test-hard-lynis-scanner:latest test-hard/lynis-scanner:$VERSION
          docker tag test-hard-telegraf:latest test-hard/telegraf:$VERSION

      - name: Save build info
        run: |
          echo "Build completed at $(date)" > build-info.txt
          echo "Version: ${{ steps.version.outputs.VERSION }}" >> build-info.txt
          echo "Commit: ${{ github.sha }}" >> build-info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-info
          path: build-info.txt

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read VERSION
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: Release v${{ steps.version.outputs.VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
