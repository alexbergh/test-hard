services:
  # Docker Socket Proxy for security - limits scanner access
  docker-proxy:
    image: tecnativa/docker-socket-proxy:0.1.2
    container_name: docker-proxy
    environment:
      CONTAINERS: 1
      EXEC: 1
      IMAGES: 1
      INFO: 1
      NETWORKS: 1
      VOLUMES: 1
      POST: 1
      SERVICES: 1
      TASKS: 1
      VERSION: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - scanner-net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  target-fedora:
    image: registry.fedoraproject.org/fedora:40
    container_name: target-fedora
    command: ["sleep", "infinity"]
  target-debian:
    image: debian:12-slim
    container_name: target-debian
    command: ["sleep", "infinity"]
  target-centos:
    image: quay.io/centos/centos:stream9
    container_name: target-centos
    command: ["sleep", "infinity"]
  target-ubuntu:
    image: ubuntu:22.04
    container_name: target-ubuntu
    command: ["sleep", "infinity"]
  openscap-scanner:
    build: ./scanners/openscap
    image: test-hard/openscap-scanner:${VERSION:-latest}
    container_name: openscap-scanner
    privileged: true
    environment:
      TARGET_CONTAINERS: target-fedora target-debian target-centos target-ubuntu
      DOCKER_HOST: tcp://docker-proxy:2375
    volumes:
      - /Users/a.hellberg/Documents/GitHub/test-hard/reports:/reports
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
      - scanner-net
    depends_on:
      - docker-proxy
      - target-fedora
      - target-debian
      - target-centos
      - target-ubuntu
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
  lynis-scanner:
    build: ./scanners/lynis
    image: test-hard/lynis-scanner:${VERSION:-latest}
    container_name: lynis-scanner
    privileged: true
    environment:
      TARGET_CONTAINERS: target-fedora target-debian target-centos target-ubuntu
      DOCKER_HOST: tcp://docker-proxy:2375
    volumes:
      - /Users/a.hellberg/Documents/GitHub/test-hard/reports:/reports
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
      - scanner-net
    depends_on:
      - docker-proxy
      - target-fedora
      - target-debian
      - target-centos
      - target-ubuntu
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
  telegraf:
    build:
      context: .
      dockerfile: telegraf/Dockerfile
    image: test-hard/telegraf:${VERSION:-latest}
    container_name: telegraf
    volumes:
      - /tmp/test_metrics:/tmp/test_metrics:ro
    ports:
      - "9091:9091"
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/metrics"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/config.yml:ro
    ports:
      - "9093:9093"
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    hostname: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-30d}"
      - "--storage.tsdb.retention.size=${PROMETHEUS_RETENTION_SIZE:-10GB}"
      - "--web.listen-address=0.0.0.0:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus-data:/prometheus
    depends_on:
      - telegraf
      - alertmanager
    ports:
      - "9090:9090"
    networks:
      default:
        aliases:
          - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
      GF_AUTH_BASIC_ENABLED: ${GF_AUTH_BASIC_ENABLED:-true}
      GF_AUTH_DISABLE_LOGIN_FORM: ${GF_AUTH_DISABLE_LOGIN_FORM:-false}
      # GF_INSTALL_PLUGINS: grafana-piechart-panel  # Temporarily disabled due to network timeout
      GF_LOG_LEVEL: ${GF_LOG_LEVEL:-debug}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    links:
      - prometheus:prometheus
    ports:
      - "${GRAFANA_HOST_PORT:-3000}:3000"
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
networks:
  default:
    driver: bridge
  scanner-net:
    driver: bridge
    internal: false

volumes:
  grafana-data: {}
  prometheus-data: {}
