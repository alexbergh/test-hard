---
- name: Ensure OpenSCAP packages are installed (RedHat family)
  ansible.builtin.package:
    name: "{{ openscap_scanner_packages['RedHat'] }}"
    state: present
  when: ansible_facts['os_family'] == 'RedHat'

- name: Ensure OpenSCAP packages are installed (Debian family)
  ansible.builtin.package:
    name: "{{ openscap_scanner_packages['Debian'] }}"
    state: present
  when: ansible_facts['os_family'] == 'Debian'

- name: Create OpenSCAP cache directory
  ansible.builtin.file:
    path: "{{ openscap_cache_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create OpenSCAP results directory
  ansible.builtin.file:
    path: "{{ scap_scan_output_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0750"

- name: Synchronise SCAP content from central repository
  ansible.builtin.get_url:
    url: "{{ scap_datastream_repo_url }}/{{ item.id }}"
    dest: "{{ openscap_cache_dir }}/{{ item.id }}"
    mode: "0644"
    force: true
  loop: "{{ scap_datastreams }}"

- name: Deploy OpenSCAP scan wrapper
  ansible.builtin.template:
    src: run-openscap-scan.sh.j2
    dest: "{{ openscap_scan_script }}"
    owner: root
    group: root
    mode: "0750"

- name: Deploy systemd service unit
  ansible.builtin.template:
    src: openscap-scan.service.j2
    dest: /etc/systemd/system/openscap-scan.service
    owner: root
    group: root
    mode: "0644"

- name: Deploy systemd timer unit
  ansible.builtin.template:
    src: openscap-scan.timer.j2
    dest: "/etc/systemd/system/{{ openscap_systemd_timer }}"
    owner: root
    group: root
    mode: "0644"

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start OpenSCAP timer
  ansible.builtin.systemd:
    name: "{{ openscap_systemd_timer }}"
    state: started
    enabled: true
